// OnlineStudentManagement.java
package com.example.osm;

import org.springframework.context.annotation.*;
import org.springframework.jdbc.datasource.DriverManagerDataSource;
import org.springframework.orm.jpa.*;
import org.springframework.stereotype.*;
import org.springframework.transaction.annotation.*;
import org.springframework.transaction.PlatformTransactionManager;
import jakarta.persistence.*;

import javax.sql.DataSource;
import java.time.LocalDateTime;
import java.util.*;

// ---------------------- ENTITIES ----------------------
@Entity
@Table(name = "courses")
class Course {
    @Id @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Integer courseId;
    private String courseName;
    private String duration;

    public Course() {}
    public Course(String courseName, String duration) {
        this.courseName = courseName;
        this.duration = duration;
    }

    public Integer getCourseId() { return courseId; }
    public String getCourseName() { return courseName; }
    public String getDuration() { return duration; }
    public void setCourseName(String n) { courseName = n; }
    public void setDuration(String d) { duration = d; }
    public String toString() { return courseId + ": " + courseName + " (" + duration + ")"; }
}

@Entity
@Table(name = "students")
class Student {
    @Id @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Integer studentId;
    private String name;
    private Double balance = 0.0;

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "course_id")
    private Course course;

    public Student() {}
    public Student(String name, Course course, Double balance) {
        this.name = name; this.course = course; this.balance = balance;
    }

    public Integer getStudentId() { return studentId; }
    public String getName() { return name; }
    public Course getCourse() { return course; }
    public Double getBalance() { return balance; }

    public void setName(String n) { name = n; }
    public void setCourse(Course c) { course = c; }
    public void setBalance(Double b) { balance = b; }

    public String toString() {
        return studentId + ": " + name + " | Course: " +
               (course != null ? course.getCourseName() : "None") +
               " | Balance: " + balance;
    }
}

@Entity
@Table(name = "payments")
class Payment {
    @Id @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Integer paymentId;
    private Double amount;
    private LocalDateTime dateTime;

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "student_id")
    private Student student;

    public Payment() {}
    public Payment(Double amount, LocalDateTime dateTime, Student student) {
        this.amount = amount; this.dateTime = dateTime; this.student = student;
    }

    public String toString() {
        return "Payment ID: " + paymentId + " | Amount: " + amount + " | Date: " + dateTime;
    }
}

// ---------------------- DAO LAYER ----------------------
@Repository
class StudentDAO {
    @PersistenceContext private EntityManager em;

    public Student find(Integer id) { return em.find(Student.class, id); }
    public List<Student> findAll() { return em.createQuery("from Student", Student.class).getResultList(); }

    @Transactional public void save(Student s) { em.persist(s); }
    @Transactional public void update(Student s) { em.merge(s); }
    @Transactional public void delete(Integer id) {
        Student s = em.find(Student.class, id);
        if (s != null) em.remove(s);
    }
}

@Repository
class CourseDAO {
    @PersistenceContext private EntityManager em;

    public Course find(Integer id) { return em.find(Course.class, id); }
    public List<Course> findAll() { return em.createQuery("from Course", Course.class).getResultList(); }

    @Transactional public void save(Course c) { em.persist(c); }
}

@Repository
class PaymentDAO {
    @PersistenceContext private EntityManager em;

    @Transactional public void save(Payment p) { em.persist(p); }
    public List<Payment> findByStudent(Integer sid) {
        return em.createQuery("from Payment p where p.student.studentId = :sid", Payment.class)
                 .setParameter("sid", sid)
                 .getResultList();
    }
}

// ---------------------- SERVICE LAYER ----------------------
@Service
class StudentService {
    @PersistenceContext private EntityManager em;
    private final StudentDAO studentDAO;
    private final CourseDAO courseDAO;
    private final PaymentDAO paymentDAO;

    public StudentService(StudentDAO s, CourseDAO c, PaymentDAO p) {
        this.studentDAO = s; this.courseDAO = c; this.paymentDAO = p;
    }

    public Course addCourse(String name, String dur) {
        Course c = new Course(name, dur);
        courseDAO.save(c);
        return c;
    }

    public Student addStudent(String name, int cid, double balance) {
        Course c = courseDAO.find(cid);
        Student s = new Student(name, c, balance);
        studentDAO.save(s);
        return s;
    }

    public List<Student> listStudents() { return studentDAO.findAll(); }

    @Transactional
    public void payFee(int sid, double amt) {
        Student s = studentDAO.find(sid);
        if (s == null) throw new RuntimeException("Student not found!");
        s.setBalance(s.getBalance() - amt);
        studentDAO.update(s);
        paymentDAO.save(new Payment(amt, LocalDateTime.now(), s));
    }

    @Transactional
    public void refund(int sid, double amt) {
        Student s = studentDAO.find(sid);
        if (s == null) throw new RuntimeException("Student not found!");
        s.setBalance(s.getBalance() + amt);
        studentDAO.update(s);
        paymentDAO.save(new Payment(-amt, LocalDateTime.now(), s));
    }

    public List<Payment> getPayments(int sid) { return paymentDAO.findByStudent(sid); }
}

// ---------------------- CONFIGURATION ----------------------
@Configuration
@ComponentScan(basePackages = "com.example.osm")
@EnableTransactionManagement
class AppConfig {
    @Bean
    public DataSource dataSource() {
        DriverManagerDataSource ds = new DriverManagerDataSource();
        ds.setDriverClassName("org.h2.Driver");
        ds.setUrl("jdbc:h2:mem:osmdb;DB_CLOSE_DELAY=-1;MODE=MYSQL");
        ds.setUsername("sa");
        ds.setPassword("");
        return ds;
    }

    @Bean
    public LocalContainerEntityManagerFactoryBean emf() {
        LocalContainerEntityManagerFactoryBean emf = new LocalContainerEntityManagerFactoryBean();
        emf.setDataSource(dataSource());
        emf.setPackagesToScan("com.example.osm");
        emf.setJpaVendorAdapter(new HibernateJpaVendorAdapter());
        Properties p = new Properties();
        p.put("hibernate.hbm2ddl.auto", "update");
        p.put("hibernate.show_sql", "true");
        p.put("hibernate.dialect", "org.hibernate.dialect.H2Dialect");
        emf.setJpaProperties(p);
        return emf;
    }

    @Bean
    public PlatformTransactionManager txManager(EntityManagerFactory emf) {
        return new JpaTransactionManager(emf);
    }
}

// ---------------------- MAIN APP ----------------------
public class OnlineStudentManagement {
    public static void main(String[] args) {
        AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext(AppConfig.class);
        StudentService service = ctx.getBean(StudentService.class);
        Scanner sc = new Scanner(System.in);

        // Seed courses
        service.addCourse("Java Fundamentals", "3 months");
        service.addCourse("Spring & Hibernate", "4 months");

        while (true) {
            System.out.println("\n===== Online Student Management =====");
            System.out.println("1. Add Student");
            System.out.println("2. List Students");
            System.out.println("3. Pay Fee");
            System.out.println("4. Refund");
            System.out.println("5. View Payments");
            System.out.println("0. Exit");
            System.out.print("Choice: ");
            int ch = Integer.parseInt(sc.nextLine());

            try {
                switch (ch) {
                    case 1 -> {
                        System.out.print("Name: "); String name = sc.nextLine();
                        System.out.print("Course ID (1 or 2): "); int cid = Integer.parseInt(sc.nextLine());
                        System.out.print("Initial balance: "); double bal = Double.parseDouble(sc.nextLine());
                        Student s = service.addStudent(name, cid, bal);
                        System.out.println("Added student ID " + s.getStudentId());
                    }
                    case 2 -> {
                        List<Student> list = service.listStudents();
                        list.forEach(System.out::println);
                    }
                    case 3 -> {
                        System.out.print("Student ID: "); int sid = Integer.parseInt(sc.nextLine());
                        System.out.print("Amount: "); double amt = Double.parseDouble(sc.nextLine());
                        service.payFee(sid, amt);
                        System.out.println("Payment successful.");
                    }
                    case 4 -> {
                        System.out.print("Student ID: "); int sid = Integer.parseInt(sc.nextLine());
                        System.out.print("Amount: "); double amt = Double.parseDouble(sc.nextLine());
                        service.refund(sid, amt);
                        System.out.println("Refund successful.");
                    }
                    case 5 -> {
                        System.out.print("Student ID: "); int sid = Integer.parseInt(sc.nextLine());
                        List<Payment> pays = service.getPayments(sid);
                        pays.forEach(System.out::println);
                    }
                    case 0 -> { ctx.close(); System.exit(0); }
                    default -> System.out.println("Invalid choice!");
                }
            } catch (Exception e) {
                System.out.println("Error: " + e.getMessage());
            }
        }
    }
}
